#!/usr/bin/perl

use strict;
use DBI;
use JSON qw( decode_json );
use Data::Dumper;

my @envVars = ('DB_NAME', 'DB_USER', 'DB_PASS');
for my $envVar (@envVars) { die "Missing env variable '$envVar'\n" unless $ENV{$envVar}; }

my ($tinydbFilePath, $maxUdId, $vdiSchemaSuffix, $idMapTable) = @ARGV;

die "Usage: testMigration tinydbFilePath maxUdId vdiSchemaSuffix idMapTable\n" unless scalar(@ARGV) == 4;

my $dbh = DBI->connect("dbi:Oracle:$ENV{DB_NAME}", $ENV{DB_USER}, $ENV{DB_PASS})
    || die "Couldn't connect to database: " . DBI->errstr;

$dbh->{RaiseError} = 1;

my $vdiDatasetsSchema = "VDI_DATASETS_$vdiSchemaSuffix";
my $vdiControlSchema = "VDI_CONTROL_$vdiSchemaSuffix";

writeIdMapToDb($tinydbFilePath, $dbh, $idMapTable);

testGeneList($dbh, $vdiDatasetsSchema, $idMapTable, $maxUdId);

sub writeIdMapToDb {
  my ($tinydbFilePath, $dbh, $idMapTable) = @_;

  open my $fh, '<', $tinydbFilePath or die "error opening $tinydbFilePath: $!";
  my $tinyJson = do { local $/; <$fh> };

  my $tiny = decode_json($tinyJson)->{'_default'};
  $dbh->do("truncate table $idMapTable");

  my $sth = $dbh->prepare(<<EOF);
    INSERT INTO $idMapTable
    VALUES (?,?)
EOF

  foreach my $record (keys $tiny) {
    $sth->execute("$tiny->{$record}->{udId}", $tiny->{$record}->{vdiId});
  }
  $dbh->commit();
}

sub testGeneList {
  my ($dbh, $vdiDatasetsSchema, $idMapTable, $maxUdId) = @_;

  my $vdiSql = "
select id.udId, gene_source_id
from $idMapTable id, $vdiDatasetsSchema.ud_geneid g
where g.user_dataset_id = id.vdiId
";

  my $udSql = "
select user_dataset_id, gene_source_id
from apidbuserdatasets.ud_geneid
where user_dataset_id < '$maxUdId'
";

  my $sql = "$vdiSql
MINUS
$udSql
";
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  print STDOUT "Gene List VDI minus UD\n";
  while(my @row = $sth->fetchrow_array) {
    print STDOUT join("\t", @row) . "\n";
  }

  my $sql = "$udSql
MINUS
$vdiSql
";
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  print STDOUT "Gene List UD minus VDI\n";
  while(my @row = $sth->fetchrow_array) {
    print STDOUT join("\t", @row) . "\n";
  }

}

