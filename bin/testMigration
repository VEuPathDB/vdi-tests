#!/usr/bin/perl

use strict;
use DBI;
use JSON qw( decode_json );
use Data::Dumper;

my @envVars = ('DB_NAME', 'DB_USER', 'DB_PASS');
for my $envVar (@envVars) { die "Missing env variable '$envVar'\n" unless $ENV{$envVar}; }

my ($tinydbFilePath, $maxUdId, $vdiSchemaSuffix, $onlyDatasetIds) = @ARGV;

die "Usage: testMigration tinydbFilePath maxUdId vdiSchemaSuffix [1 to report only dataset ids]\n" unless scalar(@ARGV) > 3;

my $VALID_IMPORT_MSG = "VALID";

my $dbh = DBI->connect("dbi:Oracle:$ENV{DB_NAME}", $ENV{DB_USER}, $ENV{DB_PASS})
    || die "Couldn't connect to database: " . DBI->errstr;

$dbh->{RaiseError} = 1;
$dbh->{LongTruncOk} = 1;

my $vdiDatasetsSchema = "VDI_DATASETS_$vdiSchemaSuffix";
my $vdiControlSchema = "VDI_CONTROL_$vdiSchemaSuffix";
my $idMapTable = "vdiUdIdMap_$vdiSchemaSuffix";

my $importedUds = writeIdMapToDb($tinydbFilePath, $dbh, $idMapTable);
my $udStatus = findUdStatus($dbh);
my $vdiStatus = findVdiStatus($dbh, $vdiControlSchema, $idMapTable);

testGeneList($dbh, $vdiDatasetsSchema, $idMapTable, $maxUdId, $onlyDatasetIds, $importedUds, $vdiStatus, $udStatus);
testRnaSeq($dbh, $vdiDatasetsSchema, $idMapTable, $maxUdId, $onlyDatasetIds, $importedUds, $vdiStatus, $udStatus);

# create table XXXXX ( udId number, vdiId varchar(100), isInvalid number);
sub writeIdMapToDb {
  my ($tinydbFilePath, $dbh, $idMapTable) = @_;

  open my $fh, '<', $tinydbFilePath or die "error opening $tinydbFilePath: $!";
  my $tinyJson = do { local $/; <$fh> };

  my $tiny = decode_json($tinyJson)->{'_default'};
  $dbh->do("truncate table $idMapTable");

  my $sth = $dbh->prepare(<<EOF);
    INSERT INTO $idMapTable
    VALUES (?,?,?)
EOF

  my $importedUds = {};
  foreach my $record (keys $tiny) {
    my $msg = $tiny->{$record}->{msg};
    my $valid = $msg? 0 : 1;
    my $udId = $tiny->{$record}->{udId};
    $sth->execute($udId, $tiny->{$record}->{vdiId}, $valid);
    $importedUds->{$udId} = {valid=>$valid, msg=>$msg};
  }
  return $importedUds;
}

sub findUdStatus {
  my ($dbh) = @_;

  my $sql = "
select user_dataset_id from APIDBUSERDATASETS.installeduserdataset where is_invalid is not null
";

  my $udStatus = {};
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  while (my @row = $sth->fetchrow_array) {
    $udStatus->{$row[0]} = "invalid";
  }
  my $sql = "
select user_dataset_id from APIDBUSERDATASETS.UserDatasetEvent where status != 'complete'
";

  my $udStatus = {};
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  while (my @row = $sth->fetchrow_array) {
    $udStatus->{$row[0]} = "incomplete";
  }
  return $udStatus;
}


sub findVdiStatus {
  my ($dbh, $vdiControlSchema, $idMapTable) = @_;
  my $sql = "
select ids.udid, status, message from $vdiControlSchema.dataset_install_message m, $idMapTable ids
where m.install_type = 'data'
and ids.vdiid = m.dataset_id
";

my $vdiStatus = {};
my $sth = $dbh->prepare($sql);
  $sth->execute();
  while (my @row = $sth->fetchrow_array) {
    $vdiStatus->{$row[0]} = {status=>$row[1], msg=>$row[2]};
  }
  return $vdiStatus;
}

sub testGeneList {
  my ($dbh, $vdiDatasetsSchema, $idMapTable, $maxUdId, $onlyDatasetIds, $importedUds, $vdiStatus, $udStatus) = @_;

  my $vdiSql = "
select id.udId, count(gene_source_id)
from $idMapTable id, $vdiDatasetsSchema.ud_geneid g
where g.user_dataset_id = id.vdiId
and id.udId < $maxUdId
group by id.udId
";

  my $udSql = "
select g.user_dataset_id, count(gene_source_id)
from apidbuserdatasets.ud_geneid g, apidbuserdatasets.UserDatasetEvent e
where g.user_dataset_id < $maxUdId
and g.user_dataset_id = e.user_dataset_id
and e.status = 'complete' and e.event_type = 'install'
group by g.user_dataset_id
";

  produceCountComparison($vdiSql, $udSql, "Gene List", $importedUds, $vdiStatus, $udStatus);
}

sub testRnaSeq {
  my ($dbh, $vdiDatasetsSchema, $idMapTable, $maxUdId, $onlyDatasetIds, $importedUds, $vdiStatus, $udStatus) = @_;

  my $vdiSql = "
select id.udId, count(na_feat_expression_id)
from $idMapTable id, $vdiDatasetsSchema.ud_profileset p,
  $vdiDatasetsSchema.ud_protocolappnode n, $vdiDatasetsSchema.ud_nafeatureexpression e
where p.user_dataset_id = id.vdiId
and id.udId < $maxUdId
and n.profile_set_id = p.profile_set_id
and e.protocol_app_node_id = n.protocol_app_node_id
group by id.udId
";

  my $udSql = "
select p.user_dataset_id, count(na_feat_expression_id)
from apidbuserdatasets.ud_profileset p, apidbuserdatasets.UserDatasetEvent e,
  apidbuserdatasets.ud_protocolappnode n, apidbuserdatasets.ud_nafeatureexpression ex
where p.user_dataset_id < $maxUdId
and p.user_dataset_id = e.user_dataset_id
and e.status = 'complete' and e.event_type = 'install'
and n.profile_set_id = p.profile_set_id
and ex.protocol_app_node_id = n.protocol_app_node_id
group by p.user_dataset_id
";

  produceCountComparison($vdiSql, $udSql, "Rna Seq", $importedUds, $vdiStatus, $udStatus);
}

sub produceCountComparison {
  my($vdiSql, $udSql, $udType, $importedUds, $vdiStatusInfo, $udStatusInfo) = @_;

  my $sql = "$udSql
MINUS
$vdiSql
";

  my $count;
  my $invalidCount;
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  print STDOUT "==== $udType - UD minus VDI ====\n";
  print STDOUT "UD-ID\timport-status\tinstall-status\n";
  while (my @row = $sth->fetchrow_array) {
    $count += 1;
    my $importInfo = $importedUds->{$row[0]};
    my $importStatus;
    $importStatus = "import-missing" unless $importInfo;
    $importStatus = "import-invalid" unless $importInfo->{valid};
    my $msg = $importInfo->{msg};
    my $vdiInfo = $vdiStatusInfo->{$row[0]};
    my $vdiStatus;
    if ($vdiInfo) {
      $vdiStatus = $vdiInfo->{status};
      $msg = $vdiInfo->{msg};
    }
    $invalidCount += $importedUds->{$row[0]};
    print STDOUT join("\t", @row) . "\t$importStatus\t$vdiStatus\t$msg\n";
  }
  print "$udType - UD minus VDI count: $count\n";
  print STDOUT "\n";

  my $sql = "$vdiSql
MINUS
$udSql
";

  $count = 0;
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  print STDOUT "==== $udType - VDI minus UD ====\n";
  print STDOUT "UD-ID\tUD-status\n";
  while (my @row = $sth->fetchrow_array) {
    my $msg = $udStatus->{$row[0]}? $udStatus->{$row[0]} : 'complete';
    print STDOUT join("\t", @row) . "\t$msg\n";
    $count+=1;
  }

  print "$udType - VDI minus UD count: $count\n";
  print STDOUT "\n";

}
