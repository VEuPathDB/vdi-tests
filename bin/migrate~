this script will

1. be written in python
2. have cmd line args:
  - `--projects` - limit to UDs from these projects.  default is no limit
  - `--ud_service_url`
  - `--ud_admin_login`
  - `--ud_admin_pwd`
  - `--vdi_service_url`
  - `--vdi_admin_login`
  - `--vdi_admin_pwd`
  - `--tinydb_json_file`
3. maintain a private mapping of UD IDs to VDI IDs, using python's tinydb as storage system.
4. be idempotent.  
5. initialize by reading all VDI-IDs from VDI and purging from tinydb any IDs that are not actually in VDI
6. read the UD service to get a list of UD IDs to migrate. this new endpoint either
  - has an option to filter by projects
  - or it returns a list of projects per UD ID, so that the python code can filter
7. for each UD to migrate
  - call a hard-coded migrate function for that type
  - identify user's original files, or approximation thereof, and place in tarball
  - extract meta-info and add into POST body
  - use admin user to import this UD into VDI
  - record the UD-VDI ID mapping in tinydb

